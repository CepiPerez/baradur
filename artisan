<?php

define ('_DIR_', dirname(__FILE__));

ini_set('display_errors', false);
error_reporting(E_ALL & ~E_NOTICE & ~E_WARNING);

# Autoload function registration
spl_autoload_register('custom_autoloader');

# Enviroment variables
if (file_exists(_DIR_.'/storage/framework/config/env.php'))
{
    require_once(_DIR_.'/storage/framework/config/env.php');
}
else
{
    require_once(_DIR_.'/vendor/baradur/DotEnv.php');
    DotEnv::load(_DIR_.'/', '.env', false);
}


# Autoload function
function custom_autoloader($class) 
{
    global $version, $home;

    //printf("Loading class: ".$class."\n");
    $version = version_compare(phpversion(), '5.3.0', '>=')?'NEW':'OLD';

    $newclass = '';
    if (file_exists(_DIR_.'/vendor/baradur/'.$class.'.php'))
        $newclass = _DIR_.'/vendor/baradur/'.$class.'.php';

    # Recursive search (class is not in predefined folders)
    if ($newclass=='') {
        $it = new RecursiveDirectoryIterator(_DIR_.'/vendor');
        foreach(new RecursiveIteratorIterator($it) as $file)
        {
            if (basename($file) == $class.'.php' || basename($file) == $class.'.PHP')
            {
                $newclass = $file;
                break;
            }
        }
    }

    # Recursive search in app folder
    if ($newclass=='') {
        $it = new RecursiveDirectoryIterator(_DIR_.'/app');
        foreach(new RecursiveIteratorIterator($it) as $file)
        {
            if (basename($file) == $class.'.php' || basename($file) == $class.'.PHP')
            {
                $newclass = $file;
                break;
            }
        }
    }

    # Recursive search in database folder
    if ($newclass=='') {
        $it = new RecursiveDirectoryIterator(_DIR_.'/database');
        foreach(new RecursiveIteratorIterator($it) as $file)
        {
            if (basename($file) == $class.'.php' || basename($file) == $class.'.PHP')
            {
                $newclass = $file;
                break;
            }
        }
    }

    if (file_exists(_DIR_.'/storage/framework/cache/classes/'.$class.'.php'))
    {
        $date = filemtime($newclass);
        $cachedate = filemtime(_DIR_.'/storage/framework/cache/classes/'.$class.'.php');
        if ($date < $cachedate)
        {
            require_once(_DIR_.'/storage/framework/cache/classes/'.$class.'.php');
            $newclass = '';
        } 
        else
        {
            @unlink(_DIR_.'/storage/framework/cache/classes/'.$class.'.php');
        }
    }
    
    if ($newclass!='') // && $version=='OLD')
    {

        $temp = file_get_contents($newclass);
        $temp = str_replace('  ', ' ', $temp);
        if (strpos($temp, ' extends Model')>0)
        {
            //echo "Class ".$class.' is Model's subclass!<br>';

            $temp2 = file_get_contents(_DIR_.'/Database/Model.php');
            $temp2 = str_replace('Model', $class.'Model', $temp2);
            $temp2 = str_replace('myparent', $class, $temp2);

            $temp = str_replace('extends Model', 'extends '.$class.'Model', $temp);

            $pattern = "/scope(.*)\(/i";
            if (preg_match_all($pattern, $temp, $matches))
            {
                $temp2 = rtrim($temp2, '}');
                foreach ($matches[1] as $scope)
                {
                    $temp2 .= "\n   public static function ". lcfirst($scope) ."()
    {
        return self::getInstance()->getQuery()->callScope('". lcfirst($scope) ."', func_get_args());
    }";
                }
                $temp2 .= "\n}";
            }


            if (file_exists(_DIR_.'/storage/framework/'.$class.'Model.php'))
                unlink(_DIR_.'/storage/framework/'.$class.'Model.php');
            file_put_contents(_DIR_.'/storage/framework/'.$class.'Model.php', $temp2);
            require_once(_DIR_.'/storage/framework/'.$class.'Model.php');
            unlink(_DIR_.'/storage/framework/'.$class.'Model.php');

            if (file_exists(_DIR_.'/storage/framework/'.$class.'.php'))
                unlink(_DIR_.'/storage/framework/'.$class.'.php');
            file_put_contents(_DIR_.'/storage/framework/'.$class.'.php', $temp);
            require_once(_DIR_.'/storage/framework/'.$class.'.php');
            unlink(_DIR_.'/storage/framework/'.$class.'.php');

    
        }
        else
        {
            //echo "$newclass<br>";
            if (strpos($newclass, '\/app/')!=false)
            {
                //echo "Saving $newclass in cache<br>";
                var_dump( function_exists('callbackReplaceArrayStart') );
                $temp = str_replace('=[', '= [', $temp);
                #$temp = preg_replace_callback('/([\W][^\]])\[/x', 'callbackReplaceArrayStart', $temp);
                #$temp = preg_replace_callback('/(array\([^\]|;]*)(\]|;*[\W]*\])/x', 'callbackReplaceArrayEnd', $temp);
                #$temp = str_replace('::class', '', preg_replace('/\w*::class/x', "'$0'", $temp));
                $temp = replaceNewPHPFunctions($temp);

                Cache::store('file')->setDirectory(_DIR_.'/storage/framework/cache/classes')
                    ->plainPut(_DIR_.'/storage/framework/cache/classes/'.$class.'.php', $temp);
                require_once(_DIR_.'/storage/framework/cache/classes/'.$class.'.php');

            }
            else
            {
                require_once($newclass);
            }
        }

    }
    
}

$artisan = true;

array_shift($argv);
$action = count($argv)>0? array_shift($argv) : null;
$database = null;

function env($val, $default=null) { return constant($val)? constant($val) : $default; }
function upper($text) { return strtoupper(str_replace('_', '', $text[0])); }
function public_path($path) { return str_replace('//', '/', _DIR_.'/'.env('PUBLIC_FOLDER').'/'.$path); }
function storage_path($path) { return str_replace('//', '/', _DIR_.'/storage/'.$path); }
function asset($asset) { return env('HOME').'/'.$asset; }
define('HOME', '/');

function view($template, $params=null)
{
	global $app, $temp_params;
	$app->action = 'show';
	if (!isset($params) && isset($temp_params)) $params = $temp_params;
	$app->result = View::loadTemplate($template, $params);
	return $app;
}


function getRelativePath($file1, $file2)
{
    $arr1 = explode('/', $file1);
    $arr2 = explode('/', $file2);

    $common = '';
    $i = 0;
    for ($i=0; $i < count($arr1); ++$i)
    {
        if ($arr1[$i] == $arr2[$i])
            $common .= $arr1[$i] .'/';
        else
            break;
    }
    $dif = count($arr1)-$i-1;
    $back = str_repeat('../', $dif);

    return array($back, str_replace($common, '', $file1), str_replace($common, '', $file2));

}

function migrate()
{
    global $database;
    $database = new Connector(env('DB_LOCAL_HOST'), env('DB_USER'), 
                        env('DB_PASSWORD'), env('DB_NAME'), env('DB_PORT'));
    Schema::checkMainTable();
    $query = 'select * from migrations';
    $applied = (array)$database->execSQL($query)->pluck('migration');

    $count = 0;

    $files = array();
    $it = new RecursiveDirectoryIterator(_DIR_.'/database/migrations');
    foreach(new RecursiveIteratorIterator($it) as $file)
    {
        if (substr(basename($file), -4)=='.php' || substr(basename($file), -4)=='.PHP')
        {
            $name = str_replace('.php', '', str_replace('.PHP', '', basename($file)));
            if (is_file($file))
                $files[] = basename($file);
        }
    }
    sort($files);

    
    foreach($files as $file)
    {
        $name = str_replace('.php', '', str_replace('.PHP', '', basename($file)));
        $short =  substr($name, 18);
        $converted = preg_replace_callback('/(_)(?:[a-z{1}])/', 'upper', $short);

        if (!in_array($name, $applied))
        {
            $startTime = microtime(true);
            printf("\e[33mMigrating:\e[m " .$name."\n");

            if (!class_exists($converted))
                include (_DIR_.'/database/migrations/'.$file);
            Schema::init($name);
            $class = new $converted;
            $class->up();

            DB::table('migrations')->insert(array('migration' => $name));

            $endTime = microtime(true);
            $time =($endTime-$startTime)*1000;
            printf("\e[32mMigrated: \e[m ".$name." (". round($time, 2) ."ms)\n");

            ++$count;
        }
    }

    if ($count == 0)
        printf("Nothing to migrate\n");
}

function rollback($rollback, $output = true)
{
    $it = new RecursiveDirectoryIterator(_DIR_.'/database/migrations');
    foreach(new RecursiveIteratorIterator($it) as $file)
    {
        if (substr(basename($file), -4)=='.php' || substr(basename($file), -4)=='.PHP')
        {
            $name = str_replace('.php', '', str_replace('.PHP', '', basename($file)));
            $short =  substr($name, 18);

            if ($name == $rollback)
            {
                $startTime = microtime(true);
                $converted = preg_replace_callback('/(_)(?:[a-z{1}])/', 'upper', $short);

                if ($output) printf("\e[33mRolling back:\e[m ".$short."\n");
    
                include ($file);
                Schema::init($name);
                $class = new $converted;
                $class->down();

                DB::table('migrations')->where('migration', $name)->delete();

                $endTime = microtime(true);
                $time =($endTime-$startTime)*1000;
                printf("\e[32mRolled back: \e[m ".$short." (". round($time, 2) ."ms)\n");
            }
        }
    }
}

function seed()
{
    global $database;
    $database = new Connector(env('DB_LOCAL_HOST'), env('DB_USER'), 
                        env('DB_PASSWORD'), env('DB_NAME'), env('DB_PORT'));
    $seeder = new DatabaseSeeder;
    $seeder->run();
    printf("\e[32mDatabase seeding completed successfully.\e[m\n");
}

function makeController($controller, $resource, $api=false)
{
    $config = new Config;
    $config->boot();

    $class = '';

    if ($api==false)
        $class = "<?php\n\nclass ".$controller."Controller extends Controller\n";
    else
        $class = "<?php\n\nclass ".$controller."Controller extends ApiController\n";

    $class .= "{\n\t".'//protected $tokenVerification = false;'. "\n\n";
    
    if ($resource)
    {
        $name = Route::$_strings['index'] ? Route::$_strings['index'] : 'index';
        $class .= "\tpublic function ".$name."()\n\t{\n\t\t//\n\t}\n\n";
        if ($api==false)
        {
            $name = Route::$_strings['create'] ? Route::$_strings['create'] : 'create';
            $class .= "\tpublic function ".$name."()\n\t{\n\t\t//\n\t}\n\n";
        }
        $name = Route::$_strings['store'] ? Route::$_strings['store'] : 'store';
        $class .= "\tpublic function ".$name."(".'$request'.")\n\t{\n\t\t//\n\t}\n\n";
        $name = Route::$_strings['show'] ? Route::$_strings['show'] : 'show';
        $class .= "\tpublic function ".$name."(".'$id'.")\n\t{\n\t\t//\n\t}\n\n";
        if ($api==false)
        {
            $name = Route::$_strings['edit'] ? Route::$_strings['edit'] : 'edit';
            $class .= "\tpublic function ".$name."(".'$id'.")\n\t{\n\t\t//\n\t}\n\n";
        }
        $name = Route::$_strings['update'] ? Route::$_strings['update'] : 'update';
        $class .= "\tpublic function ".$name."(".'$request, $id'.")\n\t{\n\t\t//\n\t}\n\n";
        $name = Route::$_strings['destroy'] ? Route::$_strings['destroy'] : 'destroy';
        $class .= "\tpublic function ".$name."(".'$id'.")\n\t{\n\t\t//\n\t}\n\n";        
    }
        
    $class .= "\n}";
    file_put_contents('app/controllers/'.$controller.'.php', $class);
    printf("\e[32mController created successfully.\e[m\n");

}

function makeModel($model)
{
    $class = "<?php\n\nclass ".$model." extends Model\n{\n\n\n}";
    file_put_contents('app/models/'.$model.'.php', $class);
    
    printf("\e[32mModel created successfully.\e[m\n");

}

function makePolicy($policy)
{
    $class = "<?php\n\nclass ".$policy."\n{\n\n\n}";
    file_put_contents('app/policies/'.$policy.'.php', $class);
    
    printf("\e[32mPolicy created successfully.\e[m\n");
}

function makeMigration($command)
{
    $config = new Config;
    $config->boot();

    list($table, $create) = TableGuesser::guess($command);
    $converted = preg_replace_callback('/(_)(?:[a-z{1}])/', 'upper', $command);

    if ($create)
    {
        $class = "<?php\n\nclass ".$converted." extends Migration\n".
            "{\n\tpublic function up()\n\t{\n\t\t".'$table = new Table'.";\n\n\t\t".
            "Schema::create('".$table."',\n\t\t\t".'$table->id()'."\n\t\t);\n\n\t}".
            "\n\n\tpublic function down()\n\t{\n\t\tSchema::dropIfExists('".$table."');\n\t}\n}";
    }
    else
    {
        $class = "<?php\n\nclass ".$converted." extends Migration\n".
        "{\n\tpublic function up()\n\t{\n\t\t".'$table = new Table'.";\n\n\t\t".
        "Schema::table('".$table."',\n\t\t\t".'//$table->string(?)'."\n\t\t);\n\n\t}".
        "\n\n\tpublic function down()\n\t{\n\t\t".'$table = new Table'.";\n\n\t\t".
        "Schema::table('".$table."',\n\t\t\t".'$table->dropColumn('."'')\n\t\t);\n\n\t}\n\n}";
    }

    $timestamp = date("Y_m_d_His");

    file_put_contents('database/migrations/'.$timestamp.'_'.$command.'.php', $class);

    printf("\e[32mMigration created successfully.\e[m\n");

}

function resetAll()
{
    global $database;
    $database = new Connector(env('DB_LOCAL_HOST'), env('DB_USER'), 
                        env('DB_PASSWORD'), env('DB_NAME'), env('DB_PORT'));
    $query = 'select * from migrations';
    $applied = (array)$database->execSQL($query)->pluck('migration');

    foreach ($applied as $rollback)
    {
        rollback($rollback, false);
    }

    printf("\e[32mDropped all tables successfully\e[m\n");
}

function sortRoutesByUri($a, $b) { return strcmp($a->url, $b->url); }

function sortRoutesByMethod($a, $b) { return strcmp($a->method, $b->method); }

function sortRoutesByName($a, $b) 
{
    if (!isset($a->name)) $a->name = '';
    if (!isset($b->name)) $b->name = '';
    return strcmp($a->name, $b->name);
}

function sortRoutesByMiddleware($a, $b) 
{
    if (!isset($a->middleware)) $a->middleware = '';
    if (!isset($b->middleware)) $b->middleware = '';
    if (is_array($a->middleware)) $a->middleware = implode(', ', $a->middleware);
    if (is_array($b->middleware)) $b->middleware = implode(', ', $b->middleware);
    return strcmp($a->middleware, $b->middleware);
}

function cs($show) { if ($show) printf("\e[32m  "); }
function ce($show) { if ($show) printf("\e[m"); }

function showMenu($ex = true)
{
    if ($ex) printf("Baradur Framework\e[32m 1.0\e[m\n\n");
    if ($ex) printf("\e[33mUsage:\e[m\n");
    if ($ex) printf("  command [options] [arguments]\n\n");

    if ($ex) printf("\e[33mAvailable commands:\e[m\n");
    cs($ex); printf("migrate                     "); ce($ex); printf("Run the database migrations\n");
    if ($ex) printf("\e[33m cache\e[m\n");
    cs($ex); printf("cache:clear                 "); ce($ex); printf("Flush the application cache\n");
    if ($ex) printf("\e[33m config\e[m\n");
    cs($ex); printf("config:cache                "); ce($ex); printf("Create a cache file for faster configuration loading\n");
    cs($ex); printf("config:clear                "); ce($ex); printf("Remove the configuration cache file\n");
    if ($ex) printf("\e[33m db\e[m\n");
    cs($ex); printf("db:seed                     "); ce($ex); printf("Seed the database with records\n");
    if ($ex) printf("\e[33m make\e[m\n");
    cs($ex); printf("make:component              "); ce($ex); printf("Create a new view component class\n");
    cs($ex); printf("make:controller             "); ce($ex); printf("Create a new controller class\n");
    cs($ex); printf("make:factory                "); ce($ex); printf("Create a new model factory\n");
    cs($ex); printf("make:middleware             "); ce($ex); printf("Create a new middleware class\n");
    cs($ex); printf("make:migration              "); ce($ex); printf("Create a new migration file\n");
    cs($ex); printf("make:model                  "); ce($ex); printf("Create a new Eloquent model class\n");
    cs($ex); printf("make:observer               "); ce($ex); printf("Create a new observer class\n");
    cs($ex); printf("make:policy                 "); ce($ex); printf("Create a new policy class\n");
    cs($ex); printf("make:request                "); ce($ex); printf("Create a new form request class\n");
    cs($ex); printf("make:resource               "); ce($ex); printf("Create a new resource\n");
    cs($ex); printf("make:seeder                 "); ce($ex); printf("Create a new seeder class\n");
    if ($ex) printf("\e[33m migrate\e[m\n");
    cs($ex); printf("migrate:fresh               "); ce($ex); printf("Drop all tables and re-run all migrations\n");
    cs($ex); printf("migrate:reset               "); ce($ex); printf("Rollback all database migrations\n");
    cs($ex); printf("migrate:rollback            "); ce($ex); printf("Rollback the last database migration\n");
    if ($ex) printf("\e[33m optimize\e[m\n");
    cs($ex); printf("optimize:clear              "); ce($ex); printf("Remove the cached bootstrap files\n");
    if ($ex) printf("\e[33m route\e[m\n");
    cs($ex); printf("route:cache                 "); ce($ex); printf("Create a route cache file for faster route registration\n");
    cs($ex); printf("route:clear                 "); ce($ex); printf("Remove the route cache file\n");
    cs($ex); printf("route:list                  "); ce($ex); printf("List all registered routes\n");
    if ($ex) printf("\e[33m storage\e[m\n");
    cs($ex); printf("storage:link                "); ce($ex); printf("Create the symbolic links configured for the application\n");
    if ($ex) printf("\e[33m view\e[m\n");
    cs($ex); printf("view:cache                  "); ce($ex); printf("Compile all of the application's Blade templates\n");
    cs($ex); printf("view:clear                  "); ce($ex); printf("Clear all compiled view files\n");
    printf("\n");
}

if (!$action)
{
    showMenu(true);
    //printf("\e[32mMigrated: \e[m ".$name." (". round($time, 2) ."ms)\n");
}

if ($action == 'list')
{
    $ex = true;
    foreach ($argv as $arg)
    {
        if ($arg == '--raw')
            $ex = false;
    }
    showMenu($ex);
}

if ($action == '--raw')
{
    showMenu(false);
}

if ($action == 'make:migration' && count($argv)>0)
{
    makeMigration($argv[0]);
}

elseif ($action == 'migrate')
{
    migrate();
}

elseif ($action == 'migrate:rollback')
{
    $database = new Connector(env('DB_LOCAL_HOST'), env('DB_USER'), 
                        env('DB_PASSWORD'), env('DB_NAME'), env('DB_PORT'));
    $query = 'select * from migrations';
    $applied = (array)$database->execSQL($query)->pluck('migration')->last();

    if (count($applied)>0)
    {
        $rollback = $applied[0];
        rollback($rollback);
    }
    else
    {
        printf("Nothing to rollback\n");
    }
}

elseif ($action == 'make:controller' && count($argv)>0)
{
    $controller = null;
    $model = null;
    $resource = false;
    $api = false;

    foreach ($argv as $arg)
    {
        if (strpos($arg, '-model=')==1)
            $model = str_replace('--model=', '', $arg);

        elseif ($arg=='--resource')
            $resource = true;

        elseif ($arg=='--api')
        {
            $api = true;
            $resource = true;
        }

        elseif (strrpos($arg, '-')==false)
            $controller = $arg;
    }

    if (file_exists('app/controllers/'.$controller.'.php'))
        die ("Error: controller ".$controller." already exists\n");

    makeController($controller, $resource, $api);

    if (isset($model) && !file_exists('app/models/'.ucfirst($model).'.php'))
    {
        makeModel(ucfirst($model));
    }
}

elseif ($action == 'make:policy' && count($argv)>0)
{
    $policy = $argv[0];
    
    if (file_exists('app/policies/'.$policy.'.php'))
        die ("Error: policy ".$policy." already exists\n");

    makePolicy($policy);
}

elseif ($action == 'make:model' && count($argv)>0)
{
    $model = null;
    $controller = false;
    $resource = false;
    $migration = false;

    foreach ($argv as $arg)
    {
        if ($arg=='--controller') $controller = true;
        elseif ($arg=='--migration') $migration = true;
        elseif ($arg=='--resource') $resource = true;
        elseif (substr($arg, 0, 1)=='-' && strlen($arg)>1)
        {
            foreach (str_split(str_replace('_', '', $arg)) as $a)
            {
                if ($a == 'm') $migration = true;
                elseif ($a == 'r') $resource = true;
                elseif ($a == 'c') $controller = true;
                elseif ($a == 'a') { $controller=true; $resource=true; $migration=true; }
            }
        }
        else $model = ucfirst($arg);
    }

    if (file_exists('app/models/'.$model.'.php'))
        die ("Error: model ".$model." already exists\n");
        
    makeModel(ucfirst($model));

    $config = new Config;
    $config->boot();

    if (!file_exists('app/controllers/'.$model.'Controller.php') && $controller)
    {
        makeController($model.'Controller', $resource);        
    }

    if ($migration)
    {
        $table = Helpers::getPlural($model, true);
        $arg = 'create_'.strtolower($table).'_table';

        makeMigration($arg);
    }
}

elseif ($action == 'make:seeder' && count($argv)>0)
{
    $seeder = $argv[0];

    if (file_exists('database/seeders/'.$seeder.'.php'))
        die ("Error: there's already a seeder called ".$seeder."\n");

    
    $class = "<?php\n\nclass ".$seeder." extends Seeder\n".
        "{\n\tpublic function run()\n\t{\n\t\t//\n\t}\n\n}";

    file_put_contents('database/seeders/'.$seeder.'.php', $class);

    printf("\e[32mSeeder created successfully.\e[m\n");

}

elseif ($action == 'make:factory' && count($argv)>0)
{
    $factory = null;
    $model = null;

    foreach ($argv as $arg)
    {
        if (strpos($arg, '-model=')==1)
            $model = str_replace('--model=', '', $arg);

        elseif (strrpos($arg, '-')==false)
            $factory = $arg;
    }

    if (file_exists('database/factories/'.$factory.'.php'))
        die ("Error: factory ".$factory." already exists\n");


    if (!isset($model)) $model = 'Model';
    
    $class = "<?php\n\nclass ".$factory." extends Factory\n".
        "{\n\tprotected ".'$model = '.$model."::class;\n\n\t".
        "public function definition()\n\t{\n\t\treturn array(".
        "\n\t\t\t//\n\t\t);\n\t}\n\n}";

    file_put_contents('database/factories/'.$factory.'.php', $class);

    printf("\e[32mFactory created successfully.\e[m\n");

}

elseif ($action == 'make:middleware' && count($argv)>0)
{
    $middleware = $argv[0];

    if (file_exists('app/middleware/'.$middleware.'.php'))
        die ("Error: middleware ".$middleware." already exists\n");

    $class = "<?php\n\nclass ".$middleware."\n".
        "{\n\tpublic function handle(".'$request'.")\n\t".
        "{\n\n\t\t//\n\n\t}\n\n}";

    file_put_contents('app/middleware/'.$middleware.'.php', $class);

    printf("\e[32mMiddleware created successfully.\e[m\n");

}

elseif ($action == 'make:request' && count($argv)>0)
{
    $request = $argv[0];

    if (!file_exists('app/requests'))
        mkdir('app/requests');

    if (file_exists('app/requests/'.$request.'.php'))
        die ("Error: request ".$request." already exists\n");

    $class = "<?php\n\nclass ".$request." extends FormRequest\n".
        "{\n\tpublic function authorize()\n\t{\n\t\treturn true;\n\t}\n\n".
        "\n\tpublic function roles()\n\t{\n\t\treturn array(\n\t\t\t//\n\t\t);\n\t}\n\n}";

    file_put_contents('app/requests/'.$request.'.php', $class);

    printf("\e[32mRequest created successfully.\e[m\n");

}

elseif ($action == 'make:component' && count($argv)>0)
{
    $component = $argv[0];
    $kebab = Helpers::camelCaseToKebabCase($component, false);

    if (!file_exists('app/view'))
        mkdir('app/view');
    if (!file_exists('app/view/components'))
        mkdir('app/view/components');

    if (file_exists('app/view/components/'.$component.'Component.php'))
        die ("Error: component ".$component." already exists\n");

    $class = "<?php\n\nclass ".$component." extends Component\n".
            "{\n\tpublic function __construct()\n\t{\n\t\t//\n\t}".
            "\n\n\tpublic function render()\n\t{\n\t\t".
            "return view('components.".$kebab."');\n\t}\n}";

    file_put_contents('app/view/components/'.$component.'Component.php', $class);

    if (!file_exists('resources/views/components'))
        mkdir('resources/views/components');

    #if (file_exists('resources/views/components/'.$component.'.blade.php'))
    #    die ("Error: request ".$component." already exists\n");

    $class = "<div>\n\t<!-- Well begun is half done. - Aristotle -->\n</div>";
    file_put_contents('resources/views/components/'.$kebab.'.blade.php', $class);

    printf("\e[32mComponent created successfully.\e[m\n");

}

elseif ($action == 'make:observer' && count($argv)>1)
{
    $observer = $argv[0];
    $model = null;

    foreach ($argv as $arg)
    {
        if (strpos($arg, '-model=')==1)
            $model = str_replace('--model=', '', $arg);

        elseif (strrpos($arg, '-')==false)
            $observer = $arg;
    }

    if (!file_exists('app/observers'))
        mkdir('app/observers');

    if (file_exists('app/observers/'.$observer.'.php'))
        die ("Error: observer ".$observer." already exists\n");

    $class = "<?php\n\nclass ".$observer."\n".
            "{\n\tpublic function created(".$model." $".strtolower($model).")\n\t{\n\t\t//\n\t}\n\n".
            "\tpublic function updated(".$model." $".strtolower($model).")\n\t{\n\t\t//\n\t}\n\n".
            "\tpublic function deleted(".$model." $".strtolower($model).")\n\t{\n\t\t//\n\t}\n\n}";

    file_put_contents('app/observers/'.$observer.'.php', $class);

    printf("\e[32mObserver created successfully.\e[m\n");

}

elseif ($action == 'make:resource' && count($argv)>0)
{
    $resource = $argv[0];
    $collection = false;

    //print("MAKE:$resource\n");

    foreach ($argv as $arg)
    {
        if ($arg=='--collection' || strpos($resource, 'Collection')>0)
            $collection = true;

    }

    if (!file_exists('app/resources'))
        mkdir('app/resources');

    if (file_exists('app/resources/'.$resource.'.php'))
        die ("Error: resource ".$resource." already exists\n");

    $class = null;

    if ($collection)
    {
        $resource = str_replace('Collection', '', $resource).'Collection';
        $class = "<?php\n\nclass ".$resource." extends ResourceCollection\n".
                "{\n\tpublic function toArray(".'$request'.")\n\t{\n".
                "\t\treturn parent::toArray(".'$request'.");\n\t}\n\n}";
    }
    else
    {
        $resource = str_replace('Resource', '', $resource).'Resource';
        $class = "<?php\n\nclass ".$resource." extends JsonResource\n".
                "{\n\tpublic function toArray(".'$request'.")\n\t{\n".
                "\t\treturn parent::toArray(".'$request'.");\n\t}\n\n}";
    }

    file_put_contents('app/resources/'.$resource.'.php', $class);

    printf("\e[32mResource created successfully.\e[m\n");

}

elseif ($action == 'db:seed')
{
    seed();
}

elseif ($action == 'migrate:fresh')
{
    $seed = false;

    if (count($argv)>0) 
    {
        foreach ($argv as $arg)
        {
            if ($arg=='--seed')
                $seed = true;
        }
    }

    resetAll();

    migrate();

    if ($seed)
    {
        seed();
    }  
}

elseif ($action == 'migrate:reset')
{
    resetAll();
}

elseif ($action == 'route:list')
{
    $showMiddleware = false;
    $method = null;
    $sort = null;

    foreach ($argv as $arg)
    {
        if ($arg=='-v') $showMiddleware = true;
        elseif (strpos($arg, '-method=')==1)
            $method = strtoupper(str_replace('--method=', '', $arg));
        elseif (strpos($arg, '-sort=')==1)
        {
            $sort_method = str_replace('--sort=', '', $arg);
            //printf("Sorted by $sort_method\n");
            if (in_array($sort_method, array('name', 'uri', 'method', 'middleware')))
                $sort = $sort_method;
        }
    }

    if (file_exists(_DIR_.'/storage/framework/routes/web.php'))
    {
        Route::setRouteList(unserialize(file_get_contents(_DIR_.'/storage/framework/routes/web.php')));
    }
    else
    {
        $config = new Config;
        $config->boot();    
        processRoutes(_DIR_, '/routes/web.php');
        Cache::store('file')->setDirectory(_DIR_.'/storage/framework/routes')
            ->plainPut(_DIR_.'/storage/framework/routes/web.php', serialize(Route::routeList()));
    }
    
    printf("\n");

    $list = Route::routeList()->toArrayObject();

    if (isset($method))
        $list = $list->where('method', $method);

    if (isset($sort))
        usort($list, 'sortRoutesBy'.ucfirst($sort));

    foreach ($list as $route)
    {
        //print_r($route);
        $line = $route->method.($route->method=='GET'? '|HEAD':'');
        $line = str_replace('GET|HEAD', "GET|HEAD  ", $line);
        $line = str_replace('POST',     "POST      ", $line);
        $line = str_replace('DELETE',   "DELETE    ", $line);
        $line = str_replace('PUT',      "PUT       ", $line);

        $line = str_replace('GET', "\e[34mGET\e[m", $line);
        $line = str_replace('|HEAD', "\e[38;5;243m|HEAD\e[m", $line);
        $line = str_replace('POST', "\e[33mPOST\e[m", $line);
        $line = str_replace('PUT', "\e[38;5;129mPUT\e[m", $line);
        $line = str_replace('DELETE', "\e[38;5;160mDELETE\e[m", $line);

        printf("  "); echo sprintf("%' -11s", $line);

        $line = str_replace('{', "\e[33m{", $route->url);
        $line = str_replace('}', "}\e[m", $line);

        printf(" /". $line .' ');

        if (isset($route->name) && $route->name == '') $route->name = null;
        if (isset($route->middleware) && $route->middleware == '') $route->middleware = null;

        $len = strlen($route->url);        
        $space = 90-$len;
        if (isset($route->name)) $space += 23;

        $line = ' '. (isset($route->name)? "\e[38;5;60m$route->name\e[38;5;243m › ":''). $route->controller;
        $line .= isset($route->func) ? '@'.$route->func : '';

        printf("\e[38;5;243m%'.".$space."s\e[m", $line);
        printf("\n");

        if ($showMiddleware && isset($route->middleware))
        {
            if (is_array($route->middleware))
            {
                $line = implode(', ', $route->middleware);
                printf("\e[38;5;243m             ⇂ ". $line ."\e[m\n");
            }
            else
            {
                printf("\e[38;5;243m             ⇂ ". $route->middleware ."\e[m\n");
            }
        }

    }
    printf("\n");
}

elseif ($action == 'route:clear')
{
    Cache::store('file')->setDirectory(_DIR_.'/storage/framework/routes')->flush();
    printf("\e[32mRoute cache cleared successfully.\e[m\n");
}

elseif ($action == 'route:cache')
{
    unlink(_DIR_.'/storage/framework/routes/web.php');
    
    printf("\e[32mRoute cache cleared successfully.\e[m\n");

    require_once(_DIR_.'/vendor/baradur/Route_functions.php');

    $config = new Config;
    $config->boot();
    
    processRoutes(_DIR_, '/routes/web.php');

    Cache::store('file')->setDirectory(_DIR_.'/storage/framework/routes')
        ->plainPut(_DIR_.'/storage/framework/routes/web.php', serialize((array)Route::routeList()));
    
    printf("\e[32mRoutes cached successfully.\e[m\n");
}

elseif ($action == 'view:clear')
{
    Cache::store('file')->setDirectory(_DIR_.'/storage/framework/views')->flush(); 
    printf("\e[32mCompiled views cleared successfully.\e[m\n");
}

elseif ($action == 'view:cache')
{
    Cache::store('file')->setDirectory(_DIR_.'/storage/framework/views')->flush();
    printf("\e[32mCompiled views cleared successfully.\e[m\n");

    global $app;
    $app = new App();

    $it = new RecursiveDirectoryIterator(_DIR_.'/resources/views');
    foreach(new RecursiveIteratorIterator($it) as $file)
    {


        if (substr(basename($file), -10 )=='.blade.php')
        {
            $file = str_replace(_DIR_.'/resources/views/', '', $file);
            $file = str_replace('.blade.php', '', $file);
		    $res = View::loadTemplate($file, array());
        }
    }
    printf("\e[32mBlade templates cached successfully.\e[m\n");

}

elseif ($action == 'cache:clear')
{
    Cache::store('file')->setDirectory(_DIR_.'/storage/framework/cache')->flush();
    printf("\e[32mApplication cache cleared successfully.\e[m\n");
}

elseif ($action == 'config:clear')
{
    Cache::store('file')->setDirectory(_DIR_.'/storage/framework/config')->flush();
    printf("\e[32mConfiguration cache cleared successfully.\e[m\n");
}

elseif ($action == 'config:cache')
{
    Cache::store('file')->setDirectory(_DIR_.'/storage/framework/config')->flush();
    printf("\e[32mConfiguration cache cleared successfully.\e[m\n");

    require_once(_DIR_.'/vendor/baradur/DotEnv.php');
    DotEnv::load(_DIR_.'/', '.env');
    printf("\e[32mConfiguration cached successfully.\e[m\n");

}

elseif ($action == 'optimize:clear')
{
    Cache::store('file')->setDirectory(_DIR_.'/storage/framework/views')->flush(); 
    printf("\e[32mCompiled views cleared successfully.\e[m\n");

    Cache::store('file')->setDirectory(_DIR_.'/storage/framework/cache')->flush();
    printf("\e[32mApplication cache cleared successfully.\e[m\n");

    Cache::store('file')->setDirectory(_DIR_.'/storage/framework/routes')->flush();
    printf("\e[32mRoute cache cleared successfully.\e[m\n");

    Cache::store('file')->setDirectory(_DIR_.'/storage/framework/config')->flush();
    printf("\e[32mConfiguration cache cleared successfully.\e[m\n");

    printf("\e[32mCaches cleared successfully.\e[m\n");
}

elseif ($action == 'storage:link')
{
    $links = include(_DIR_.'/config/filesystem.php');
    foreach ($links['links'] as $key => $val)
    {
        //list ($back, $key, $val) = getRelativePath($key, $val);
        //chmod($val, 0777);
        //symlink($val, $back.$key);
        shell_exec("ln -sr $val $key");
        printf("\e[32mThe [$key] link has been connected to [$val].\e[m\n");
    }
    printf("\e[32mThe links have been created.\e[m\n");
    

}