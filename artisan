<?php

define ('_DIR_', dirname(__FILE__));

# Autoload function registration
spl_autoload_register('custom_autoloader');

# Enviroment variables
require_once('vendor/baradur/DotEnv.php');
DotEnv::load(_DIR_.'/.env');

# Autoload function
function custom_autoloader($class) 
{
    global $version, $home;

    //printf("Loading class: ".$class."\n");
    $version = version_compare(phpversion(), '5.3.0', '>=')?'NEW':'OLD';

    $newclass = '';
    if (file_exists(_DIR_.'/vendor/baradur/'.$class.'.php'))
        $newclass = _DIR_.'/vendor/baradur/'.$class.'.php';

    # Recursive search (class is not in predefined folders)
    if ($newclass=='') {
        $it = new RecursiveDirectoryIterator(_DIR_.'/vendor');
        foreach(new RecursiveIteratorIterator($it) as $file)
        {
            if (basename($file) == $class.'.php' || basename($file) == $class.'.PHP')
            {
                $newclass = $file;
                break;
            }
        }
    }

    # Recursive search in app folder
    if ($newclass=='') {
        $it = new RecursiveDirectoryIterator(_DIR_.'/app');
        foreach(new RecursiveIteratorIterator($it) as $file)
        {
            if (basename($file) == $class.'.php' || basename($file) == $class.'.PHP')
            {
                $newclass = $file;
                break;
            }
        }
    }

    # Recursive search in database folder
    if ($newclass=='') {
        $it = new RecursiveDirectoryIterator(_DIR_.'/database');
        foreach(new RecursiveIteratorIterator($it) as $file)
        {
            if (basename($file) == $class.'.php' || basename($file) == $class.'.PHP')
            {
                $newclass = $file;
                break;
            }
        }
    }
    
    if ($newclass!='')
    {
        require_once($newclass);
    }
    
}

array_shift($argv);
$action = count($argv)>0? array_shift($argv) : null;
$database = null;

function env($val, $default=null) { return constant($val)? constant($val) : $default; }
function upper($text) { return strtoupper(str_replace('_', '', $text[0])); }
function public_path($path) { return str_replace('//', '/', _DIR_.'/'.env('PUBLIC_FOLDER').'/'.$path); }
function storage_path($path) { return str_replace('//', '/', _DIR_.'/storage/'.$path); }

function getRelativePath($file1, $file2)
{
    $arr1 = explode('/', $file1);
    $arr2 = explode('/', $file2);

    $common = '';
    $i = 0;
    for ($i=0; $i < count($arr1); ++$i)
    {
        if ($arr1[$i] == $arr2[$i])
            $common .= $arr1[$i] .'/';
        else
            break;
    }
    $dif = count($arr1)-$i-1;
    $back = str_repeat('../', $dif);

    return array($back, str_replace($common, '', $file1), str_replace($common, '', $file2));

}

function migrate()
{
   global $database;
    $database = new Connector(env('DB_LOCAL_HOST'), env('DB_USER'), 
                        env('DB_PASSWORD'), env('DB_NAME'), env('DB_PORT'));
    Schema::checkMainTable();
    $query = 'select * from migrations';
    $applied = (array)$database->execSQL($query)->pluck('migration');

    $count = 0;

    $files = array();
    $it = new RecursiveDirectoryIterator(_DIR_.'/database/migrations');
    foreach(new RecursiveIteratorIterator($it) as $file)
    {
        if (substr(basename($file), -4)=='.php' || substr(basename($file), -4)=='.PHP')
        {
            $name = str_replace('.php', '', str_replace('.PHP', '', basename($file)));
            if (is_file($file))
                $files[] = basename($file);
        }
    }
    sort($files);

    
    foreach($files as $file)
    {
        $name = str_replace('.php', '', str_replace('.PHP', '', basename($file)));
        $short =  substr($name, 18);
        $converted = preg_replace_callback('/(_)(?:[a-z{1}])/', 'upper', $short);

        if (!in_array($name, $applied))
        {
            $startTime = microtime(true);
            printf("\e[38;5;214mMigrating:\e[m " .$name."\n");

            if (!class_exists($converted))
                include (_DIR_.'/database/migrations/'.$file);
            Schema::init($name);
            $class = new $converted;
            $class->up();

            DB::table('migrations')->insert(array('migration' => $name));

            $endTime = microtime(true);
            $time =($endTime-$startTime)*1000;
            printf("\e[38;5;40mMigrated: \e[m ".$name." (". round($time, 2) ."ms)\n");

            ++$count;
        }
    }

    if ($count == 0)
        printf("Nothing to migrate\n");
}

function rollback($rollback, $output = true)
{
    $it = new RecursiveDirectoryIterator(_DIR_.'/database/migrations');
    foreach(new RecursiveIteratorIterator($it) as $file)
    {
        if (substr(basename($file), -4)=='.php' || substr(basename($file), -4)=='.PHP')
        {
            $name = str_replace('.php', '', str_replace('.PHP', '', basename($file)));
            $short =  substr($name, 18);

            if ($name == $rollback)
            {
                $startTime = microtime(true);
                $converted = preg_replace_callback('/(_)(?:[a-z{1}])/', 'upper', $short);

                if ($output) printf("\e[38;5;214mRolling back:\e[m ".$short."\n");
    
                include ($file);
                Schema::init($name);
                $class = new $converted;
                $class->down();

                DB::table('migrations')->where('migration', $name)->delete();

                $endTime = microtime(true);
                $time =($endTime-$startTime)*1000;
                printf("\e[38;5;40mRolled back: \e[m ".$short." (". round($time, 2) ."ms)\n");
            }
        }
    }
}

function seed()
{
    global $database;
    $database = new Connector(env('DB_LOCAL_HOST'), env('DB_USER'), 
                        env('DB_PASSWORD'), env('DB_NAME'), env('DB_PORT'));
    $seeder = new DatabaseSeeder;
    $seeder->run();
    printf("\e[38;5;40mDatabase seeding completed successfully\e[m\n");
}

function makeController($controller, $resource, $api=false)
{
    $config = new Config;
    $config->boot();

    $class = '';

    if ($api==false)
        $class = "<?php\n\nclass ".$controller."Controller extends Controller\n";
    else
        $class = "<?php\n\nclass ".$controller."Controller extends ApiController\n";

    $class .= "{\n\t".'//protected $tokenVerification = false;'. "\n\n";
    
    if ($resource)
    {
        $name = Route::$_strings['index'] ? Route::$_strings['index'] : 'index';
        $class .= "\tpublic function ".$name."()\n\t{\n\t\t//\n\t}\n\n";
        if ($api==false)
        {
            $name = Route::$_strings['create'] ? Route::$_strings['create'] : 'create';
            $class .= "\tpublic function ".$name."()\n\t{\n\t\t//\n\t}\n\n";
        }
        $name = Route::$_strings['store'] ? Route::$_strings['store'] : 'store';
        $class .= "\tpublic function ".$name."(".'$request'.")\n\t{\n\t\t//\n\t}\n\n";
        $name = Route::$_strings['show'] ? Route::$_strings['show'] : 'show';
        $class .= "\tpublic function ".$name."(".'$id'.")\n\t{\n\t\t//\n\t}\n\n";
        if ($api==false)
        {
            $name = Route::$_strings['edit'] ? Route::$_strings['edit'] : 'edit';
            $class .= "\tpublic function ".$name."(".'$id'.")\n\t{\n\t\t//\n\t}\n\n";
        }
        $name = Route::$_strings['update'] ? Route::$_strings['update'] : 'update';
        $class .= "\tpublic function ".$name."(".'$request, $id'.")\n\t{\n\t\t//\n\t}\n\n";
        $name = Route::$_strings['destroy'] ? Route::$_strings['destroy'] : 'destroy';
        $class .= "\tpublic function ".$name."(".'$id'.")\n\t{\n\t\t//\n\t}\n\n";        
    }
        
    $class .= "\n}";
    file_put_contents('app/controllers/'.$controller.'.php', $class);
    printf("\e[38;5;40mController created successfully \e[m\n");

}

function makeModel($model)
{
    $class = "<?php\n\nclass ".$model." extends Model\n{\n\n\n}";
    file_put_contents('app/models/'.$model.'.php', $class);
    
    printf("\e[38;5;40mModel created successfully \e[m\n");

}

function makePolicy($policy)
{
    $class = "<?php\n\nclass ".$policy."\n{\n\n\n}";
    file_put_contents('app/policies/'.$policy.'.php', $class);
    
    printf("\e[38;5;40mPolicy created successfully \e[m\n");
}

function makeMigration($command)
{
    $config = new Config;
    $config->boot();

    list($table, $create) = TableGuesser::guess($command);
    $converted = preg_replace_callback('/(_)(?:[a-z{1}])/', 'upper', $command);

    if ($create)
    {
        $class = "<?php\n\nclass ".$converted." extends Migration\n".
            "{\n\tpublic function up()\n\t{\n\t\t".'$table = new Table'.";\n\n\t\t".
            "Schema::create('".$table."',\n\t\t\t".'$table->id()'."\n\t\t);\n\n\t}".
            "\n\n\tpublic function down()\n\t{\n\t\tSchema::dropIfExists('".$table."');\n\t}\n}";
    }
    else
    {
        $class = "<?php\n\nclass ".$converted." extends Migration\n".
        "{\n\tpublic function up()\n\t{\n\t\t".'$table = new Table'.";\n\n\t\t".
        "Schema::table('".$table."',\n\t\t\t".'//$table->string(?)'."\n\t\t);\n\n\t}".
        "\n\n\tpublic function down()\n\t{\n\t\t".'$table = new Table'.";\n\n\t\t".
        "Schema::table('".$table."',\n\t\t\t".'$table->dropColumn('."'')\n\t\t);\n\n\t}\n\n}";
    }

    $timestamp = date("Y_m_d_His");

    file_put_contents('database/migrations/'.$timestamp.'_'.$command.'.php', $class);

    printf("\e[38;5;40mMigration created successfully \e[m\n");

}

function resetAll()
{
    global $database;
    $database = new Connector(env('DB_LOCAL_HOST'), env('DB_USER'), 
                        env('DB_PASSWORD'), env('DB_NAME'), env('DB_PORT'));
    $query = 'select * from migrations';
    $applied = (array)$database->execSQL($query)->pluck('migration');

    foreach ($applied as $rollback)
    {
        rollback($rollback, false);
    }

    printf("\e[38;5;40mDropped all tables successfully\e[m\n");
}


function sortRoutesByUri($a, $b) { return strcmp($a->url, $b->url); }

function sortRoutesByMethod($a, $b) { return strcmp($a->method, $b->method); }

function sortRoutesByName($a, $b) 
{
    if (!isset($a->name)) $a->name = '';
    if (!isset($b->name)) $b->name = '';
    return strcmp($a->name, $b->name);
}

function sortRoutesByMiddleware($a, $b) 
{
    if (!isset($a->middleware)) $a->middleware = '';
    if (!isset($b->middleware)) $b->middleware = '';
    if (is_array($a->middleware)) $a->middleware = implode(', ', $a->middleware);
    if (is_array($b->middleware)) $b->middleware = implode(', ', $b->middleware);
    return strcmp($a->middleware, $b->middleware);
}

if ($action == 'make:migration' && count($argv)>0)
{
    makeMigration($argv[0]);
}

elseif ($action == 'migrate')
{
    migrate();
}

elseif ($action == 'migrate:rollback')
{
    $database = new Connector(env('DB_LOCAL_HOST'), env('DB_USER'), 
                        env('DB_PASSWORD'), env('DB_NAME'), env('DB_PORT'));
    $query = 'select * from migrations';
    $applied = (array)$database->execSQL($query)->pluck('migration')->last();

    if (count($applied)>0)
    {
        $rollback = $applied[0];
        rollback($rollback);
    }
    else
    {
        printf("Nothing to rollback\n");
    }
}

elseif ($action == 'make:controller' && count($argv)>0)
{
    $controller = null;
    $model = null;
    $resource = false;
    $api = false;

    foreach ($argv as $arg)
    {
        if (strpos($arg, '-model=')==1)
            $model = str_replace('--model=', '', $arg);

        elseif ($arg=='--resource')
            $resource = true;

        elseif ($arg=='--api')
        {
            $api = true;
            $resource = true;
        }

        elseif (strrpos($arg, '-')==false)
            $controller = $arg;
    }

    if (file_exists('app/controllers/'.$controller.'.php'))
        die ("Error: controller ".$controller." already exists\n");

    makeController($controller, $resource, $api);

    if (isset($model) && !file_exists('app/models/'.ucfirst($model).'.php'))
    {
        makeModel(ucfirst($model));
    }
}

elseif ($action == 'make:policy' && count($argv)>0)
{
    $policy = $argv[0];
    
    if (file_exists('app/policies/'.$policy.'.php'))
        die ("Error: policy ".$policy." already exists\n");

    makePolicy($policy);
}

elseif ($action == 'make:model' && count($argv)>0)
{
    $model = null;
    $controller = false;
    $resource = false;
    $migration = false;

    foreach ($argv as $arg)
    {
        if ($arg=='--controller') $controller = true;
        elseif ($arg=='--migration') $migration = true;
        elseif ($arg=='--resource') $resource = true;
        elseif (substr($arg, 0, 1)=='-' && strlen($arg)>1)
        {
            foreach (str_split(str_replace('_', '', $arg)) as $a)
            {
                if ($a == 'm') $migration = true;
                elseif ($a == 'r') $resource = true;
                elseif ($a == 'c') $controller = true;
                elseif ($a == 'a') { $controller=true; $resource=true; $migration=true; }
            }
        }
        else $model = ucfirst($arg);
    }

    if (file_exists('app/models/'.$model.'.php'))
        die ("Error: model ".$model." already exists\n");
        
    makeModel(ucfirst($model));

    $config = new Config;
    $config->boot();

    if (!file_exists('app/controllers/'.$model.'Controller.php') && $controller)
    {
        makeController($model.'Controller', $resource);        
    }

    if ($migration)
    {
        $table = Helpers::getPlural($model, true);
        $arg = 'create_'.strtolower($table).'_table';

        makeMigration($arg);
    }
}

elseif ($action == 'make:seeder' && count($argv)>0)
{
    $seeder = $argv[0];

    if (file_exists('database/seeders/'.$seeder.'.php'))
        die ("Error: there's already a seeder called ".$seeder."\n");

    
    $class = "<?php\n\nclass ".$seeder." extends Seeder\n".
        "{\n\tpublic function run()\n\t{\n\t\t//\n\t}\n\n}";

    file_put_contents('database/seeders/'.$seeder.'.php', $class);

    printf("\e[38;5;40mSeeder created successfully \e[m\n");

}

elseif ($action == 'make:factory' && count($argv)>0)
{
    $factory = null;
    $model = null;

    foreach ($argv as $arg)
    {
        if (strpos($arg, '-model=')==1)
            $model = str_replace('--model=', '', $arg);

        elseif (strrpos($arg, '-')==false)
            $factory = $arg;
    }

    if (file_exists('database/factories/'.$factory.'.php'))
        die ("Error: factory ".$factory." already exists\n");


    if (!isset($model)) $model = 'Model';
    
    $class = "<?php\n\nclass ".$factory." extends Factory\n".
        "{\n\tprotected ".'$model = '.$model."::class;\n\n\t".
        "public function definition()\n\t{\n\t\treturn array(".
        "\n\t\t\t//\n\t\t);\n\t}\n\n}";

    file_put_contents('database/factories/'.$factory.'.php', $class);

    printf("\e[38;5;40mFactory created successfully \e[m\n");

}

elseif ($action == 'make:middleware' && count($argv)>0)
{
    $middleware = $argv[0];

    if (file_exists('app/middleware/'.$middleware.'.php'))
        die ("Error: middleware ".$middleware." already exists\n");

    $class = "<?php\n\nclass ".$middleware."\n".
        "{\n\tpublic function handle(".'$request'.")\n\t".
        "{\n\n\t\t//\n\n\t}\n\n}";

    file_put_contents('app/middleware/'.$middleware.'.php', $class);

    printf("\e[38;5;40mMiddleware created successfully \e[m\n");

}

elseif ($action == 'make:request' && count($argv)>0)
{
    $request = $argv[0];

    if (!file_exists('app/requests'))
        mkdir('app/requests');

    if (file_exists('app/requests/'.$request.'.php'))
        die ("Error: request ".$request." already exists\n");

    $class = "<?php\n\nclass ".$request." extends FormRequest\n".
        "{\n\tpublic function authorize()\n\t{\n\t\treturn true;\n\t}\n\n".
        "\n\tpublic function roles()\n\t{\n\t\treturn array(\n\t\t\t//\n\t\t);\n\t}\n\n}";

    file_put_contents('app/requests/'.$request.'.php', $class);

    printf("\e[38;5;40mRequest created successfully \e[m\n");

}

elseif ($action == 'make:component' && count($argv)>0)
{
    $component = $argv[0];
    $kebab = Helpers::camelCaseToKebabCase($component, false);

    if (!file_exists('app/view'))
        mkdir('app/view');
    if (!file_exists('app/view/components'))
        mkdir('app/view/components');

    if (file_exists('app/view/components/'.$component.'Component.php'))
        die ("Error: request ".$component." already exists\n");

    $class = "<?php\n\nclass ".$component." extends Component\n".
            "{\n\tpublic function __construct()\n\t{\n\t\t//\n\t}".
            "\n\n\tpublic function render()\n\t{\n\t\t".
            "return view('components.".$kebab."');\n\t}\n}";

    file_put_contents('app/view/components/'.$component.'Component.php', $class);

    if (!file_exists('resources/views/components'))
        mkdir('resources/views/components');

    #if (file_exists('resources/views/components/'.$component.'.blade.php'))
    #    die ("Error: request ".$component." already exists\n");

    $class = "<div>\n\t<!-- Well begun is half done. - Aristotle -->\n</div>";
    file_put_contents('resources/views/components/'.$kebab.'.blade.php', $class);

    printf("\e[38;5;40mComponent created successfully \e[m\n");

}

elseif ($action == 'make:observer' && count($argv)>1)
{
    $observer = $argv[0];
    $model = null;

    foreach ($argv as $arg)
    {
        if (strpos($arg, '-model=')==1)
            $model = str_replace('--model=', '', $arg);

        elseif (strrpos($arg, '-')==false)
            $observer = $arg;
    }

    if (!file_exists('app/observers'))
        mkdir('app/observers');

    if (file_exists('app/observers/'.$observer.'.php'))
        die ("Error: request ".$observer." already exists\n");

    $class = "<?php\n\nclass ".$observer."\n".
            "{\n\tpublic function created(".$model." $".strtolower($model).")\n\t{\n\t\t//\n\t}\n\n".
            "\tpublic function updated(".$model." $".strtolower($model).")\n\t{\n\t\t//\n\t}\n\n".
            "\tpublic function deleted(".$model." $".strtolower($model).")\n\t{\n\t\t//\n\t}\n\n}";

    file_put_contents('app/observers/'.$observer.'.php', $class);

    printf("\e[38;5;40mObserver created successfully \e[m\n");

}

elseif ($action == 'db:seed')
{
    seed();
}

elseif ($action == 'migrate:fresh')
{
    $seed = false;

    if (count($argv)>0) 
    {
        foreach ($argv as $arg)
        {
            if ($arg=='--seed')
                $seed = true;
        }
    }

    resetAll();

    migrate();

    if ($seed)
    {
        seed();
    }  
}

elseif ($action == 'migrate:reset')
{
    resetAll();
}

elseif ($action == 'route:list')
{
    $showMiddleware = false;
    $method = null;
    $sort = null;

    foreach ($argv as $arg)
    {
        if ($arg=='-v') $showMiddleware = true;
        elseif (strpos($arg, '-method=')==1)
            $method = strtoupper(str_replace('--method=', '', $arg));
        elseif (strpos($arg, '-sort=')==1)
        {
            $sort_method = str_replace('--sort=', '', $arg);
            //printf("Sorted by $sort_method\n");
            if (in_array($sort_method, array('name', 'uri', 'method', 'middleware')))
                $sort = $sort_method;
        }
    }


    $config = new Config;
    $config->boot();
    include(_DIR_.'/routes/routes.php');
    printf("\n");

    $list = Route::routeList()->toArrayObject();

    if (isset($method))
        $list = $list->where('method', $method);

    if (isset($sort))
        usort($list, 'sortRoutesBy'.ucfirst($sort));

    foreach ($list as $route)
    {
        //print_r($route);
        $line = $route->method.($route->method=='GET'? '|HEAD':'');
        $line = str_replace('GET|HEAD', "GET|HEAD  ", $line);
        $line = str_replace('POST',     "POST      ", $line);
        $line = str_replace('DELETE',   "DELETE    ", $line);
        $line = str_replace('PUT',      "PUT       ", $line);

        $line = str_replace('GET', "\e[38;5;63mGET\e[m", $line);
        $line = str_replace('|HEAD', "\e[38;5;243m|HEAD\e[m", $line);
        $line = str_replace('POST', "\e[38;5;214mPOST\e[m", $line);
        $line = str_replace('PUT', "\e[38;5;129mPUT\e[m", $line);
        $line = str_replace('DELETE', "\e[38;5;160mDELETE\e[m", $line);

        printf("  "); echo sprintf("%' -11s", $line);

        $line = str_replace('{', "\e[38;5;214m{", $route->url);
        $line = str_replace('}', "}\e[m", $line);

        printf(" /". $line .' ');

        if (isset($route->name) && $route->name == '') $route->name = null;
        if (isset($route->middleware) && $route->middleware == '') $route->middleware = null;

        $len = strlen($route->url);        
        $space = 90-$len;
        if (isset($route->name)) $space += 23;

        $line = ' '. (isset($route->name)? "\e[38;5;60m$route->name\e[38;5;243m › ":''). $route->controller;
        $line .= isset($route->func) ? '@'.$route->func : '';

        printf("\e[38;5;243m%'.".$space."s\e[m", $line);
        printf("\n");

        if ($showMiddleware && isset($route->middleware))
        {
            if (is_array($route->middleware))
            {
                $line = implode(', ', $route->middleware);
                printf("\e[38;5;243m             ⇂ ". $line ."\e[m\n");
            }
            else
            {
                printf("\e[38;5;243m             ⇂ ". $route->middleware ."\e[m\n");
            }
        }

    }
    printf("\n");
}

elseif ($action == 'route:clear')
{
    Cache::store('file')
        ->setDirectory(_DIR_.'/resources/_system/cache')
            ->forget('baradur_routes');
    
    printf("Route cache cleared!\n");
}

elseif ($action == 'view:clear')
{
    $files = glob(_DIR_.'/resources/_system/compiled/*');
    foreach($files as $file)
    {
        if(is_file($file))
            unlink($file);
    }
    printf("Compiled views cleared!!\n");
}

elseif ($action == 'cache:clear')
{
    Cache::store('file')
        ->setDirectory(_DIR_.'/resources/_system/cache')
            ->flush();
    
    printf("App cache cleared!\n");
}

elseif ($action == 'storage:link')
{
    $links = include(_DIR_.'/config/filesystem.php');
    foreach ($links['links'] as $key => $val)
    {
        //list ($back, $key, $val) = getRelativePath($key, $val);
        //chmod($val, 0777);
        //symlink($val, $back.$key);
        shell_exec("ln -sr $val $key");
        printf("\e[38;5;40mThe [$key] link has been connected to [$val].\e[m\n");
    }
    printf("\e[38;5;40mThe links have been created.\e[m\n");
    

}