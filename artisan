<?php

define ('_DIR_', dirname(__FILE__));

# Autoload function registration
spl_autoload_register('custom_autoloader');

# Enviroment variables
require_once('vendor/baradur/DotEnv.php');
DotEnv::load(_DIR_.'/.env');

# Autoload function
function custom_autoloader($class) 
{
    global $version, $home;

    //printf("Loading class: ".$class."\n");
    $version = version_compare(phpversion(), '5.3.0', '>=')?'NEW':'OLD';

    $newclass = '';
    if (file_exists(_DIR_.'/vendor/baradur/'.$class.'.php'))
        $newclass = _DIR_.'/vendor/baradur/'.$class.'.php';

    # Recursive search (class is not in predefined folders)
    if ($newclass=='') {
        $it = new RecursiveDirectoryIterator(_DIR_.'/vendor');
        foreach(new RecursiveIteratorIterator($it) as $file)
        {
            if (basename($file) == $class.'.php' || basename($file) == $class.'.PHP')
            {
                $newclass = $file;
                break;
            }
        }
    }

    # Recursive search in app folder
    if ($newclass=='') {
        $it = new RecursiveDirectoryIterator(_DIR_.'/app');
        foreach(new RecursiveIteratorIterator($it) as $file)
        {
            if (basename($file) == $class.'.php' || basename($file) == $class.'.PHP')
            {
                $newclass = $file;
                break;
            }
        }
    }

    # Recursive search in database folder
    if ($newclass=='') {
        $it = new RecursiveDirectoryIterator(_DIR_.'/database');
        foreach(new RecursiveIteratorIterator($it) as $file)
        {
            if (basename($file) == $class.'.php' || basename($file) == $class.'.PHP')
            {
                $newclass = $file;
                break;
            }
        }
    }
    
    if ($newclass!='')
    {
        require_once($newclass);
    }
    
}

array_shift($argv);
$action = count($argv)>0? array_shift($argv) : null;
$database = null;

function upper($text) { return strtoupper(str_replace('_', '', $text[0])); }


function migrate()
{
    global $database;
    $database = new Connector(DB_LOCAL_HOST, DB_USER, DB_PASSWORD, DB_NAME, DB_PORT);
    $query = 'select * from migrations';
    $applied = (array)$database->execSQL($query)->pluck('migration');

    $count = 0;
    $it = new RecursiveDirectoryIterator(_DIR_.'/database/migrations');
    foreach(new RecursiveIteratorIterator($it) as $file)
    {
        if (substr(basename($file), -4)=='.php' || substr(basename($file), -4)=='.PHP')
        {
            $name = str_replace('.php', '', str_replace('.PHP', '', basename($file)));
            $short =  substr($name, 16);
            $converted = preg_replace_callback('/(_)(?:[a-z{1}])/', 'upper', $short);

            if (!in_array($name, $applied))
            {
                $startTime = microtime(true);
                printf("Migrating: ".$name."\n");
    
                if (!class_exists($converted))
                    include ($file);
                Schema::init($name);
                $class = new $converted;
                $class->up();

                DB::table('migrations')->insert(array('migration' => $name));

                $endTime = microtime(true);
                $time =($endTime-$startTime)*1000;
                printf("Migrated: ".$name." (". round($time, 2) ."ms)\n");

                ++$count;
            }
        }
    }

    if ($count == 0)
        printf("Nothing to migrate\n");
}

function rollback($rollback, $output = true)
{
    $it = new RecursiveDirectoryIterator(_DIR_.'/database/migrations');
    foreach(new RecursiveIteratorIterator($it) as $file)
    {
        if (substr(basename($file), -4)=='.php' || substr(basename($file), -4)=='.PHP')
        {
            $name = str_replace('.php', '', str_replace('.PHP', '', basename($file)));
            $short =  substr($name, 16);

            if ($name == $rollback)
            {
                $converted = preg_replace_callback('/(_)(?:[a-z{1}])/', 'upper', $short);

                if ($output) printf("Rolling back: ".$short."\n");
    
                include ($file);
                Schema::init($name);
                $class = new $converted;
                $class->down();

                DB::table('migrations')->where('migration', $name)->delete();

            }
        }
    }
}

function seed()
{
    global $database;
    $database = new Connector(DB_LOCAL_HOST, DB_USER, DB_PASSWORD, DB_NAME, DB_PORT);
    $seeder = new DatabaseSeeder;
    $seeder->run();
    printf("Database seeding completed successfully\n");
}

function makeController($controller, $resource)
{
    require('app/config.php');

    $class = "<?php\n\nclass ".$controller."Controller extends Controller\n".
    "{\n\t".'//protected $tokenVerification = false;'. "\n\n";
    
    if ($resource)
    {
        $name = Route::$_strings['index'] ? Route::$_strings['index'] : 'index';
        $class .= "\tpublic function ".$name."()\n\t{\n\t\t//\n\t}\n\n";
        $name = Route::$_strings['create'] ? Route::$_strings['create'] : 'create';
        $class .= "\tpublic function ".$name."()\n\t{\n\t\t//\n\t}\n\n";
        $name = Route::$_strings['store'] ? Route::$_strings['store'] : 'store';
        $class .= "\tpublic function ".$name."(".'$request'.")\n\t{\n\t\t//\n\t}\n\n";
        $name = Route::$_strings['show'] ? Route::$_strings['show'] : 'show';
        $class .= "\tpublic function ".$name."(".'$id'.")\n\t{\n\t\t//\n\t}\n\n";
        $name = Route::$_strings['edit'] ? Route::$_strings['edit'] : 'edit';
        $class .= "\tpublic function ".$name."(".'$id'.")\n\t{\n\t\t//\n\t}\n\n";
        $name = Route::$_strings['update'] ? Route::$_strings['update'] : 'update';
        $class .= "\tpublic function ".$name."(".'$request, $id'.")\n\t{\n\t\t//\n\t}\n\n";
        $name = Route::$_strings['destroy'] ? Route::$_strings['destroy'] : 'destroy';
        $class .= "\tpublic function ".$name."(".'$id'.")\n\t{\n\t\t//\n\t}\n\n";        
    }
        
    $class .= "\n}";
    file_put_contents('app/controllers/'.$controller.'.php', $class);
    printf("Controller created successfully.\n");
}

function makeModel($model)
{
    $class = "<?php\n\nclass ".$model." extends Model\n{\n\n\n}";
    file_put_contents('app/models/'.$model.'.php', $class);
    
    printf("Model created successfully.\n");
}

function makePolicy($policy)
{
    $class = "<?php\n\nclass ".$policy."\n{\n\n\n}";
    file_put_contents('app/policies/'.$policy.'.php', $class);
    
    printf("Policy created successfully.\n");
}

function makeMigration($command)
{
    require('app/configvider.php');

    list($table, $create) = TableGuesser::guess($command);
    $converted = preg_replace_callback('/(_)(?:[a-z{1}])/', 'upper', $command);

    if ($create)
    {
        $class = "<?php\n\nclass ".$converted." extends Migration\n".
            "{\n\tpublic function up()\n\t{\n\t\t".'$table = new Table'.";\n\n\t\t".
            "Schema::create('".$table."',\n\t\t\t".'$table->id()'."\n\t\t);\n\n\t}".
            "\n\n\tpublic function down()\n\t{\n\t\tSchema::dropIfExists('".$table."');\n\t}\n}";
    }
    else
    {
        $class = "<?php\n\nclass ".$converted." extends Migration\n".
        "{\n\tpublic function up()\n\t{\n\t\t".'$table = new Table'.";\n\n\t\t".
        "Schema::table('".$table."',\n\t\t\t".'//$table->string(?)'."\n\t\t);\n\n\t}".
        "\n\n\tpublic function down()\n\t{\n\t\t".'$table = new Table'.";\n\n\t\t".
        "Schema::table('".$table."',\n\t\t\t".'$table->dropColumn('."'')\n\t\t);\n\n\t}\n\n}";
    }

    $timestamp = date("Y_m_d_Hm");

    file_put_contents('database/migrations/'.$timestamp.'_'.$command.'.php', $class);

    printf("Migration created successfully\n");
}

function resetAll()
{
    global $database;
    $database = new Connector(DB_LOCAL_HOST, DB_USER, DB_PASSWORD, DB_NAME, DB_PORT);
    $query = 'select * from migrations';
    $applied = (array)$database->execSQL($query)->pluck('migration');

    foreach ($applied as $rollback)
    {
        rollback($rollback, false);
    }

    printf("Dropped all tables successfully\n");
}


if ($action == 'make:migration' && count($argv)>0)
{
    makeMigration($argv[0]);
}

else if ($action == 'migrate')
{
    migrate();
}

else if ($action == 'migrate:rollback')
{
    $database = new Connector(DB_LOCAL_HOST, DB_USER, DB_PASSWORD, DB_NAME, DB_PORT);
    $query = 'select * from migrations';
    $applied = (array)$database->execSQL($query)->pluck('migration')->last();

    if (count($applied)>0)
    {
        $rollback = $applied[0];
        rollback($rollback);
    }
    else
    {
        printf("Nothing to rollback\n");
    }
}

elseif ($action == 'make:controller' && count($argv)>0)
{
    $controller = null;
    $model = null;
    $resource = false;

    foreach ($argv as $arg)
    {
        if (strpos($arg, '-model=')==1)
            $model = str_replace('--model=', '', $arg);

        elseif ($arg=='--resource')
            $resource = true;

        elseif (strrpos($arg, '-')==false)
            $controller = $arg;
    }

    if (file_exists('app/controllers/'.$controller.'.php'))
        die ("Error: controller ".$controller." already exists\n");

    makeController($controller, $resource);

    if (isset($model) && !file_exists('app/models/'.ucfirst($model).'.php'))
    {
        makeModel(ucfirst($model));
    }
}

elseif ($action == 'make:polcy' && count($argv)>0)
{
    $policy = $argv[0];
    
    if (file_exists('app/policies/'.$policy.'.php'))
        die ("Error: policy ".$policy." already exists\n");

    makePolicy($policy);
}

elseif ($action == 'make:model' && count($argv)>0)
{
    $model = null;
    $controller = false;
    $resource = false;
    $migration = false;

    foreach ($argv as $arg)
    {
        if ($arg=='--controller') $controller = true;
        elseif ($arg=='--migration') $migration = true;
        elseif ($arg=='--resource') $resource = true;
        else if (substr($arg, 0, 1)=='-' && strlen($arg)>1)
        {
            foreach (str_split(str_replace('_', '', $arg)) as $a)
            {
                if ($a == 'm') $migration = true;
                else if ($a == 'r') $resource = true;
                else if ($a == 'c') $controller = true;
                else if ($a == 'a') { $controller=true; $resource=true; $migration=true; }
            }
        }
        else $model = ucfirst($arg);
    }

    if (file_exists('app/models/'.$model.'.php'))
        die ("Error: model ".$model." already exists\n");
        
    makeModel(ucfirst($model));

    require('app/config.php');

    if (!file_exists('app/controllers/'.$model.'Controller.php') && $controller)
    {
        makeController($model.'Controller', $resource);        
    }

    if ($migration)
    {
        $table = Helpers::getPlural($model, true);
        $arg = 'create_'.strtolower($table).'_table';

        makeMigration($arg);
    }
}

else if ($action == 'make:seeder' && count($argv)>0)
{
    $seeder = $argv[0];

    if (file_exists('database/seeders/'.$seeder.'.php'))
        die ("Error: there's already a seeder called ".$seeder."\n");

    
    $class = "<?php\n\nclass ".$seeder." extends Seeder\n".
        "{\n\tpublic function run()\n\t{\n\t\t//\n\t}\n\n}";

    file_put_contents('database/seeders/'.$seeder.'.php', $class);

    printf("Seeder created successfully\n");
}

else if ($action == 'make:factory' && count($argv)>0)
{
    $factory = null;
    $model = null;

    foreach ($argv as $arg)
    {
        if (strpos($arg, '-model=')==1)
            $model = str_replace('--model=', '', $arg);

        elseif (strrpos($arg, '-')==false)
            $factory = $arg;
    }

    if (file_exists('database/factories/'.$factory.'.php'))
        die ("Error: factory ".$factory." already exists\n");


    if (!isset($model)) $model = 'Model';
    
    $class = "<?php\n\nclass ".$factory." extends Factory\n".
        "{\n\tprotected ".'$model = '.$model."::class;\n\n\t".
        "public function definition()\n\t{\n\t\treturn array(".
        "\n\t\t\t//\n\t\t);\n\t}\n\n}";

    file_put_contents('database/factories/'.$factory.'.php', $class);

    printf("Factory created successfully\n");
}

else if ($action == 'make:middleware' && count($argv)>0)
{
    $middleware = $argv[0];

    if (file_exists('app/middleware/'.$middleware.'.php'))
        die ("Error: middleware ".$middleware." already exists\n");

    $class = "<?php\n\nclass ".$middleware."\n".
        "{\n\tpublic function handle(".'$request'.")\n\t".
        "{\n\n\t\t//\n\n\t}\n\n}";

    file_put_contents('app/middleware/'.$middleware.'.php', $class);

    printf("Middleware created successfully\n");
}

else if ($action == 'db:seed')
{
    seed();
}

else if ($action == 'migrate:fresh')
{
    $seed = false;

    if (count($argv)>0) 
    {
        foreach ($argv as $arg)
        {
            if ($arg=='--seed')
                $seed = true;
        }
    }

    resetAll();

    migrate();

    if ($seed)
    {
        seed();
    }  
}

else if ($action == 'migrate:reset')
{
    resetAll();
}

